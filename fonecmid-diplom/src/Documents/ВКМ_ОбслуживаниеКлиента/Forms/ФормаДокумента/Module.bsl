

#Область ОбработчикиСобытийФормы


&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
 //ВКМ_Начало: ************************************	
 
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.РаботаСФайлами
	ПараметрыГиперссылки = РаботаСФайлами.ГиперссылкаФайлов();
	ПараметрыГиперссылки.Размещение = "КоманднаяПанель";
	РаботаСФайлами.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыГиперссылки);
	// Конец СтандартныеПодсистемы.РаботаСФайлами
	
//ВКМ_Конец************************************************

ЭтоНовый = Объект.Ссылка = Документы.ВКМ_ОбслуживаниеКлиента.ПустаяСсылка();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
//ВКМ_НАЧАЛО: ***********************************************
	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
    
  //ВКМ_Конец *************************************************
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	//ЭтоНовый = ТекущийОбъект.ЭтоНовый();
 	
    // СтандартныеПодсистемы.ПодключаемыеКоманды
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
    // Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
    ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
КонецПроцедуры



&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Клиент) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("Отмена записи! Не заполнен Клиент по зявке!",,"Клиент","Объект");
	 		Отказ = Истина;
		ИначеЕсли Не ЗначениеЗаполнено(Объект.Сотрудник) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("Отмена записи! Не назначен специалист по заявке.", ,"Сотрудник","Объект");
			Отказ = Истина;
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ДатаПроведенияРабот) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("Отмена записи! Не задана дата проведения работ по заявке.", ,"ДатаПроведенияРабот","Объект");
			Отказ = Истина;
		ИначеЕсли Не ЗначениеЗаполнено(Объект.ВремяНачалаПлан) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("Отмена записи! Не задано время начала работ по заявке.", ,"ВремяНачалаПлан","Объект");
			Отказ = Истина;
		ИначеЕсли Не ЗначениеЗаполнено(Объект.ВремяОкончанияПлан) Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю("Отмена записи! Не задано время окончания работ по заявке.",,"ВремяОкончанияПлан", "Объект");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;

			
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если (ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись) Тогда

		ФлагНовоеУведомление = Ложь;

		Уведомление = Новый Структура;
		Уведомление.Вставить("Заявка", ТекущийОбъект.Ссылка);
		Уведомление.Вставить("Сотрудник", ТекущийОбъект.Сотрудник);
		Уведомление.Вставить("Дата", ТекущийОбъект.ДатаПроведенияРабот);
		Уведомление.Вставить("Начало", ТекущийОбъект.ВремяНачалаПлан);
		Уведомление.Вставить("Окончание", ТекущийОбъект.ВремяОкончанияПлан);
	
	//Проверяем это был записан новый документ
		Если ЭтоНовый Тогда
		//Это новый документ
			ФлагНовоеУведомление = Истина;
			ТекстУведомления = СоздатьНовоеУведомление(Уведомление);
		КонецЕсли;

		Если Не ФлагНовоеУведомление Тогда
	 //Это перезаписанный документ
			ИсторияДанных.ОбновитьИсторию(ТекущийОбъект.Ссылка);
			Отбор = Новый Структура;
			Отбор.Вставить("Данные", ТекущийОбъект.Ссылка);
			Версии = ИсторияДанных.ВыбратьВерсии(Отбор);
			Различия = ИсторияДанных.ПолучитьРазличияВерсий(ТекущийОбъект.Ссылка, Версии[0].НомерВерсии,
				Версии[1].НомерВерсии);
			Если ЗначениеЗаполнено(Различия) Тогда
				ФлагНовоеУведомление = Истина;
				ТекстУведомления = СоздатьУведомлениеОбИзмененииЗаявки(ТекущийОбъект.Ссылка, Различия);
			КонецЕсли;
		КонецЕсли;

		Если ФлагНовоеУведомление Тогда
			УведомОбъект = Справочники.ВКМ_Уведомления.СоздатьЭлемент();
			УведомОбъект.Текст = ТекстУведомления;
			УведомОбъект.Записать();
		КонецЕсли;

	КонецЕсли;
	
	
	 
КонецПроцедуры



#КонецОбласти



#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция СоздатьНовоеУведомление(ДанныеУведомления)
	Результат = СтрШаблон("Создана новая заявка: %1 ,
	| на заявку назначен специалист: %2 ,
	| дата выполнения работ: %3 ,
	| время начала работ: %4, 
	| время окончания: %5", 
	ОбщегоНазначения.ПредметСтрокой(ДанныеУведомления.Заявка),
	ОбщегоНазначения.ПредметСтрокой(ДанныеУведомления.Сотрудник),
	Формат(ДанныеУведомления.Дата, "ДЛФ=DD;"),
	Формат(ДанныеУведомления.Начало, "ДЛФ=T;"),
	Формат(ДанныеУведомления.Окончание, "ДЛФ=T;"));
	
	Возврат Результат;
	
КонецФункции


&НаСервере
Функция СоздатьУведомлениеОбИзмененииЗаявки(Заявка, Различия)
	Результат = СтрШаблон("Изменения по заявке: %1 ",ОбщегоНазначения.ПредметСтрокой(Заявка));
	
	Если Различия.Свойство("Сотрудник" ) Тогда
		Результат = СтрШаблон("%1
		| по заявке назначен новый сотрудник: %2 ", Результат, Различия.Сотрудник.ЗначениеПослеИзменения.Представление);
	КонецЕсли;
	
	Если Различия.Свойство("ДатаПроведенияРабот" ) Тогда
		Результат = СтрШаблон("%1
		| по заявке изменена дата выполнения работ с %2 на: %3 ", Результат, 
		            Формат(Различия.ДатаПроведенияРабот.ЗначениеДоИзменения,"ДЛФ=DD;"),
		            Формат(Различия.ДатаПроведенияРабот.ЗначениеПослеИзменения,"ДЛФ=DD;"));
	КонецЕсли;
	
	Если Различия.Свойство("ВремяНачалаПлан" ) Тогда
		Результат = СтрШаблон("%1
		| по заявке изменено время начала выполнения работ с %2 на: %3 ", Результат, 
		            Формат(Различия.ВремяНачалаПлан.ЗначениеДоИзменения,"ДЛФ=T;"),
		            Формат(Различия.ВремяНачалаПлан.ЗначениеПослеИзменения,"ДЛФ=T;"));
	КонецЕсли;
	
		            
	Если Различия.Свойство("ВремяОкончанияПлан" ) Тогда
		Результат = СтрШаблон("%1
		| по заявке изменено время окончания выполнения работ с %2 на: %3 ", Результат, 
		            Формат(Различия.ВремяОкончанияПлан.ЗначениеДоИзменения,"ДЛФ=T;"),
		            Формат(Различия.ВремяОкончанияПлан.ЗначениеПослеИзменения,"ДЛФ=T;"));
	КонецЕсли;
	
	
	Возврат Результат;
КонецФункции

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
    ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область РаботаСФайлами
// СтандартныеПодсистемы.РаботаСФайлами  
&НаКлиенте
Процедура Подключаемый_КомандаПанелиПрисоединенныхФайлов(Команда)
	 РаботаСФайламиКлиент.КомандаУправленияПрисоединеннымиФайлами(ЭтотОбъект, Команда);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПроверкаПеретаскивания(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

// СтандартныеПодсистемы.РаботаСФайлами
&НаКлиенте
Процедура Подключаемый_ПолеПредпросмотраПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	 РаботаСФайламиКлиент.ПолеПредпросмотраПеретаскивание(ЭтотОбъект, Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.РаботаСФайлами

#КонецОбласти



#КонецОбласти
